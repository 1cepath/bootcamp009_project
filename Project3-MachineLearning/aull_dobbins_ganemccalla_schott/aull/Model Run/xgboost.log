/home/wes/ve/lib/python3.6/site-packages/sklearn/cross_validation.py:44: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.
  "This module will be removed in 0.20.", DeprecationWarning)
/home/wes/ve/lib/python3.6/site-packages/sklearn/grid_search.py:43: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. This module will be removed in 0.20.
  DeprecationWarning)
[Parallel(n_jobs=1)]: Done 150 out of 150 | elapsed: 94.6min finished
2017-05-26 09:52:03.313060
Fitting 5 folds for each of 30 candidates, totalling 150 fits
[mean: 0.33315, std: 0.08653, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 3, 'min_child_weight': 1, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.33063, std: 0.08353, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 3, 'min_child_weight': 2, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.33270, std: 0.08430, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 3, 'min_child_weight': 3, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.32874, std: 0.08257, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 3, 'min_child_weight': 4, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.33181, std: 0.08252, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 3, 'min_child_weight': 5, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.28146, std: 0.08007, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 4, 'min_child_weight': 1, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.28423, std: 0.08441, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 4, 'min_child_weight': 2, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.28410, std: 0.08376, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 4, 'min_child_weight': 3, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.29176, std: 0.08521, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 4, 'min_child_weight': 4, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.29043, std: 0.07668, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 4, 'min_child_weight': 5, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.23567, std: 0.08167, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 5, 'min_child_weight': 1, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.23183, std: 0.07770, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 5, 'min_child_weight': 2, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.23836, std: 0.07567, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 5, 'min_child_weight': 3, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.23214, std: 0.07674, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 5, 'min_child_weight': 4, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.23779, std: 0.08475, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 5, 'min_child_weight': 5, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.19923, std: 0.08374, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 6, 'min_child_weight': 1, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.19032, std: 0.07863, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 6, 'min_child_weight': 2, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.20220, std: 0.07190, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 6, 'min_child_weight': 3, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.19362, std: 0.08050, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 6, 'min_child_weight': 4, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.19986, std: 0.08052, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 6, 'min_child_weight': 5, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.17475, std: 0.07095, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 7, 'min_child_weight': 1, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.17086, std: 0.07126, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 7, 'min_child_weight': 2, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.16723, std: 0.07428, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 7, 'min_child_weight': 3, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.16664, std: 0.07592, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 7, 'min_child_weight': 4, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.17026, std: 0.08625, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 7, 'min_child_weight': 5, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.15208, std: 0.06514, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 8, 'min_child_weight': 1, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.15247, std: 0.07391, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 8, 'min_child_weight': 2, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.15014, std: 0.07333, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 8, 'min_child_weight': 3, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.14447, std: 0.06359, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 8, 'min_child_weight': 4, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}, mean: 0.14705, std: 0.07611, params: {'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 8, 'min_child_weight': 5, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}]
XGBRegressor(base_score=0.5, colsample_bylevel=1, colsample_bytree=0.8,
       gamma=0, learning_rate=0.4, max_delta_step=0, max_depth=3,
       min_child_weight=1, missing=None, n_estimators=250, nthread=-1,
       objective='reg:linear', reg_alpha=0, reg_lambda=1,
       scale_pos_weight=1, seed=0, silent=1, subsample=0.8)
0.3331482455541472
{'colsample_bytree': 0.8, 'learning_rate': 0.4, 'max_depth': 3, 'min_child_weight': 1, 'n_estimators': 250, 'objective': 'reg:linear', 'silent': 1, 'subsample': 0.8}
2017-05-26 11:26:58.125063
Traceback (most recent call last):
  File "xgb_gridsearch.py", line 301, in <module>
    verbose_eval=20)
TypeError: train() got an unexpected keyword argument 'colsample_bytree'
