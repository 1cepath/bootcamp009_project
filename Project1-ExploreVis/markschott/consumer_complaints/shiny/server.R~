library(dplyr)
library(tidyr)
library(ggplot2)
function(input, output, session) {
    
    # observe({
    #     dest <- sort(unique(flights[origin == input$origin, dest]))
    #     updateSelectizeInput(
    #         session, "dest",
    #         choices = dest,
    #         selected = dest[1])
    # })
    
    # observe({
    #     month = sort(unique(flights[origin == input$origin & dest == input$dest, month]))
    #     updateSelectizeInput(
    #         session, "month",
    #         choices = month,
    #         selected = month[1])
    # })
    
     # filtered_complaints <- reactive({
     #     complaints %>%
     #         filter(origin == input$origin & dest == input$dest & month == input$month) %>%
     #         group_by(carrier) %>%
     #         summarise(n = n(),
     #                   departure = mean(dep_delay),
     #                   arrival = mean(arr_delay))
     # })
    
    observe({

        filtered = complaints %>% filter(Date.received < input$dateRange[2] &
                                             Date.received > input$dateRange[1])

        filtered = filtered %>% group_by(State) %>% summarize(count = n())
        filtered = inner_join(filtered, abbrevs, by = c('State' = 'abbreviation'))

        ## normalize the count by the 2016 population estimate
        #get population dataset and clean it up a bit
        pops_plain = pops %>% select(State.or.territory, Population.estimate.2016.07.01)
        colnames(pops_plain) = c('region','population')

        # join pops_plain with freq_by_state by region to add in the population data
        filtered = merge(filtered, pops_plain, by = 'region') %>%
            mutate(norm_count = (count/population))

        ### Drop old columns before adding new ones
        states@data = states@data %>% select(-c(COUNT,NORM_COUNT))
        states@data = inner_join(states@data, filtered, by = c('NAME' = 'region'))

        ## Drop unneccesary columns and upper case all column names
        states@data = states@data %>% select(-c(State))
        colnames(states@data) = toupper(colnames(states@data))

    })
    
    filtered_states <- reactive ({

        filtered = complaints %>% filter(Date.received < input$dateRange[2] &
                                             Date.received > input$dateRange[1])

        filtered = filtered %>% group_by(State) %>% summarize(count = n())
        filtered = inner_join(filtered, abbrevs, by = c('State' = 'abbreviation'))

        ## normalize the count by the 2016 population estimate
        #get population dataset and clean it up a bit
        pops_plain = pops %>% select(State.or.territory, Population.estimate.2016.07.01)
        colnames(pops_plain) = c('region','population')

        # join pops_plain with freq_by_state by region to add in the population data
        filtered = merge(filtered, pops_plain, by = 'region') %>%
            mutate(norm_count = (count/population))

        ### Drop old columns before adding new ones
        states@data = states@data %>% select(-c(COUNT,NORM_COUNT))
        states@data = inner_join(states@data, filtered, by = c('NAME' = 'region'))

        ## Drop unneccesary columns and upper case all column names
        states@data = states@data %>% select(-c(State))
        colnames(states@data) = toupper(colnames(states@data))

    })
    
    bar_data <- reactive ({
        
        
    })

    observeEvent(input$normalize, {
        if(input$normalize) {
            counts = states$NORM_COUNT
            arg = 'NORM_COUNT'
            html_text = "<strong>%s</strong><br/>%g complaints per person"
        } else {
            counts = states$COUNT
            arg = 'COUNT'
            html_text = "<strong>%s</strong><br/>%g complaints"
        }
        
        output$usmap <- renderLeaflet({
            ## palette to color delay
            pal <- colorNumeric(palette = "viridis", domain = counts)
            labels <- sprintf(
                html_text,
                states$NAME, counts
            ) %>% lapply(htmltools::HTML)
            
            leaflet(states) %>% 
                setView(-96, 37.8, 3) %>%
                addTiles() %>%
                addPolygons(
                    stroke = FALSE,
                    smoothFactor = 0.2,
                    color = ~pal(counts),
                    weight = 2,
                    dashArray = "3",
                    fillOpacity = 4,
                    highlight = highlightOptions(
                        weight = 5,
                        color = "#666",
                        dashArray = "",
                        fillOpacity = 0.7,
                        bringToFront = TRUE),
                    label = labels,
                    labelOptions = labelOptions(
                        style = list("font-weight" = "normal", padding = "3px 8px"),
                        textsize = "15px",
                        direction = "auto"))
        })
    })
    
    # filtered_complaints <- reactive({
    #     complaints %>%
    #         filter(origin == input$origin & dest == input$dest & month == input$month) %>%
    #         group_by(carrier) %>%
    #         summarise(n = n(),
    #                   departure = mean(dep_delay),
    #                   arrival = mean(arr_delay))
    # })
  
  # output$delay <- renderPlot(
  #     flights_delay() %>% 
  #         gather(key = type, value = delay, departure, arrival) %>%
  #         ggplot(aes(x = carrier, y = delay, fill = type)) +
  #         geom_col(position = "dodge") + 
  #         ggtitle("Average delay")
  # )
  

  
  #output$old_faithful  <- renderDataTable(flights_delay())
  
}